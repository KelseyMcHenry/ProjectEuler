"""
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Square	 	    P4,n=n2	 	1, 4, 9, 16, 25, ...
Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
This is the only set of 4-digit numbers with this property.
Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
"""

from HelperFunctions import is_cyclic_4dig, polygonal_number_generator, digits_in_int_unsorted
from itertools import product, permutations, chain
import time

top_bound = 10000

polygonal_generators = {
    3: polygonal_number_generator(3),
    4: polygonal_number_generator(4),
    5: polygonal_number_generator(5),
    6: polygonal_number_generator(6),
    7: polygonal_number_generator(7),
    8: polygonal_number_generator(8)
}

polygonal_numbers = {
    3: [],
    4: [],
    5: [],
    6: [],
    7: [],
    8: []
}


def increase_polygonals_object_len():
    for type in polygonal_generators.keys():
        next_candidate = next(polygonal_generators[type])
        while next_candidate % 100 < 10 or next_candidate // 100 < 10:
            next_candidate = next(polygonal_generators[type])
        polygonal_numbers[type].append(next_candidate)

def remove_out_of_bound_numbers():
    for index, list_of_values in polygonal_numbers.items():
        polygonal_numbers[index] = [i for i in list_of_values if i > 999 and i < 10000]

def populate_lists():
    increase_polygonals_object_len()
    while any([max(values) < 10000 for values in polygonal_numbers.values()]):
        increase_polygonals_object_len()

def can_eliminate_set_of_six(set_of_six):
    end_numbers = [number % 100 for number in set_of_six]
    for number in set_of_six:
        if number // 100 not in end_numbers:
            return True

    if len(set(set_of_six)) != len(set_of_six):
        return True

    return False


populate_lists()
remove_out_of_bound_numbers()

# sieve_results()

prod = 1
for l in polygonal_numbers.values():
    prod *= len(l)
print(f'total of {prod} combinations to process')

candidate_combinations_generator = product(*polygonal_numbers.values())

while True:
    set_of_six = next(candidate_combinations_generator)
    if can_eliminate_set_of_six(set_of_six):
        continue
    for permutation in permutations(set_of_six):
        if is_cyclic_4dig(list(permutation)):
            print('------DONE------')
            print(permutation)
            print(sum(set_of_six))
            print('----------------')
            exit()


