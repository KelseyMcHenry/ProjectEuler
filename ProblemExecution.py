from HelperFunctions import *


def problem_1():
    """
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

    Find the sum of all the multiples of 3 or 5 below 1000.
    """

    answer = 0

    for n in range(1, 1000):
        if n % 3 == 0 or n % 5 == 0:
            answer += n

    return answer


def problem_2():
    """
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    """

    answer = 0
    fib_gen = fibonacci_generator()
    for value in fib_gen:
        if value < 4000000:
            if value % 2 == 0:
                answer += value
        else:
            break

    return answer


def problem_3():
    """
    The prime factors of 13195 are 5, 7, 13 and 29.

    What is the largest prime factor of the number 600851475143 ?
    """

    prime_factors = prime_factorization(600851475143)
    answer = max(prime_factors)

    return answer


def problem_4():
    """
    A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.

    Find the largest palindrome made from the product of two 3-digit numbers.
    """

    answer = 0

    for i in range(100, 1000):
        for j in range(100, 1000):
            prod = i * j
            if is_palindromic(prod) and prod > answer:
                answer = prod

    return answer


def problem_5():
    """
    2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

    What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
    """

    LCD_nums_and_powers = {}

    for i in range(1, 20):
        temp = prime_factors_counts(i)
        if temp:
            for num, power in temp.items():
                if num not in LCD_nums_and_powers.keys():
                    LCD_nums_and_powers[num] = power
                elif LCD_nums_and_powers[num] < power:
                    LCD_nums_and_powers[num] = power

    answer = 1
    for num, power in LCD_nums_and_powers.items():
        answer *= (num ** power)

    return answer
